/** represents a Mandelbrot set */
// based on: http://www.righto.com/2017/06/one-hour-mandelbrot-creating-fractal-on.html
class Mandelbrot {
	field int width;						// screen width
	field int height;						// screen height
	field SimpleFloat x0, x1;		// init values for min-x, max-x
	field SimpleFloat y0, y1; 	// init values for min-y, max-y
	field int maxIter;					// init value for max no. of iterations

	/** constructs a new Mandelbrot set within the space minX/minY - maxX/maxY. uses iters iterations for calculation */
	constructor Mandelbrot new(int minX, int maxX, int minY, int maxY, int iters) {
		let x0 = SimpleFloat.encode(minX);
		let y0 = SimpleFloat.encode(minY);
		let x1 = SimpleFloat.encode(maxX);
		let y1 = SimpleFloat.encode(maxY);
		let maxIter = iters;
		let width = 512;
		let height = 256;
		return this;
	}

	/** Disposes this class. */
	method void dispose() {
		do x0.dispose();
		do y0.dispose();
		do x1.dispose();
		do y1.dispose();
	  do Memory.deAlloc(this);  // uses an OS routine to recycle the memory held by the object
	  return;
	}

	/** paints the mandelbrot set to the screen */
	method void paint() {
		var int currX, currY;													// running counter for screen rows and columns
		var int iterations;														// holds the number of iterations for the current calculation
		var SimpleFloat xStep, yStep, cX, cY;		// step size on rows and columns, next values for complex c
		
		// initialize global counters
		let currY = 0;
		// calculate step size in x direction
		let xStep = calc_xStep();
		// calculate step size in y direction
		let yStep = calc_yStep();

		// iterates over the rows
		while (currY < height) {
			// starts a new iteration
			// with:  y0 + yStep * y		
			let cY = calc_cY(yStep, currY);
			// resetting the running column counter per row
			let currX = 0;
			// iterates over the columns
			while (currX < width) {			
				// start an new iteration
				// with: x0 + xStep * x
				let cX = calc_cX(xStep, currX);
				// calculating the current mandelbrot set in a loop
				// returning the abs of the point in space
				let iterations = Mandelbrot.calculate(cX, cY, maxIter);
				// only paint if within the boundary of the mandelbrot set
				if (~(iterations < maxIter)) {
					do Screen.setColor(true);
					do Screen.drawPixel(currX, currY);
				}
				do cX.dispose();
				// next column	
				let currX = currX +	1;
			}
			do cY.dispose();
			// next row
			let currY = currY + 1;
		}
		// cleanup step counters
		do xStep.dispose();
		do yStep.dispose();
		return;
	}

	/** runs a mandelbrot set calculation for max iterations and returns the abs of the point in the mandelbrot set */
	function int calculate(SimpleFloat cX, SimpleFloat cY, int maxIter) {
		var int currIter;							// running counter for Mandelbrot set iterations
		var boolean exitLoop;					// flag denoting if internal loop should be exited (simulates a break stmt.)
		var SimpleFloat x, y, x2, y2, xy2, tmp1, tmp2, boundary;
		
		// initialize x and y to 0
		let x = SimpleFloat.encode(0);
		let y = SimpleFloat.encode(0);

		// initialize loop counters
		let currIter = 0;
		let exitLoop = false;
		let boundary = SimpleFloat.encode(4);

		// initialize x2 = x² and y2 = y²
		let x2 = x.mul(x);
		let y2 = y.mul(y);

		// calculate x² + y²; if > 4 it will likely be out of the set
		let xy2 = x2.add(y2);

		// if not in the mandelbrot set break out of loop
		if (~(xy2.getValue() < boundary.getValue())) {
			let exitLoop = true;
		}
		do xy2.dispose();
			
		while (~(exitLoop)) {
			// calculate y = 2 * x * y + cY
			let tmp1 = x.mul(y);
			let tmp2 = SimpleFloat.mulInt(tmp1, 2);
			do tmp1.dispose();
			do y.dispose();
			let y = tmp2.add(cY);

			// calculate x = x2 - y2 + cX
			let tmp1 = x2.sub(y2);
			do x.dispose();
			let x = tmp1.add(cX);
			do tmp1.dispose();
			do tmp2.dispose();

			// calculate new x2 and y2
			let tmp1 = x.mul(x);
			do x2.dispose();
			let x2 = tmp1;

			let tmp2 = y.mul(y);
			do y2.dispose();
			let y2 = tmp2;

			// calculate x² + y²; if > 4 it will likely be out of the set
			let xy2 = x2.add(y2);
			// if not in the mandelbrot set break out of loop
			if (~(xy2.getValue() < boundary.getValue())) {
				let exitLoop = true;
			}
			else {
				// loop counter for inner loop
				let currIter = currIter + 1;
				// if larger than maxIter break out of loop
				if (currIter > maxIter) {
					let exitLoop = true;
					do Output.moveCursor(0,0);
					do Output.printString("ITER: ");
					do Output.printInt(currIter);
				}
			}
			do xy2.dispose();
			do tmp1.dispose();
			do tmp2.dispose();
		}
		// cleanup
		do x.dispose();
		do y.dispose();
		do x2.dispose();
		do y2.dispose();
		do boundary.dispose();
		return currIter;
	}

	/** calculates the xStep based on xStep = (x1 - x0) / width */
	method SimpleFloat calc_xStep() {
		var SimpleFloat result, tmp;
		let tmp = x1.sub(x0);
		let result = SimpleFloat.divInt(tmp, width);
		do tmp.dispose();
		return result;
	}

	/** calculates the yStep based on yStep = (y1 - y0) / height */
	method SimpleFloat calc_yStep() {
		var SimpleFloat result, tmp;
		let tmp = y1.sub(y0);
		let result = SimpleFloat.divInt(tmp, height);
		do tmp.dispose();
		return result;
	}

	/** calculates the next cX value based on cX = x0 + xStep * x */
	method SimpleFloat calc_cX(SimpleFloat xStep, int x) {
		var SimpleFloat result, tmp;
		let tmp = SimpleFloat.mulInt(xStep, x);
		let result = x0.add(tmp);
		do tmp.dispose();
		return result;
	}

	/** calculates the next cY value based on cY = y0 + yStep * y */
	method SimpleFloat calc_cY(SimpleFloat yStep, int y) {
		var SimpleFloat result, tmp;
		let tmp = SimpleFloat.mulInt(yStep, y);
		let result = y0.add(tmp);
		do tmp.dispose();
		return result;
	}
}