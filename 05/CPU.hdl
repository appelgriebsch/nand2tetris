// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    /** MSB signifies A or C instruction */
    /** A: 0vvv vvvv vvvv vvvv */
    Not(in=instruction[15], out=isAInstr);
    /** C: 111a c1c2c3c4 c5c6d1d2 d3j1j2j3 */
    Not(in=isAInstr, out=isCInstr);

    /** tackle ARegister based on ALU out or 15-bit content of an A-instruction */
    Mux16(a=outALU, b[0..14]=instruction[0..14], sel=isAInstr, out=selARegIn);
    /** load flag is based on isAInstr OR d1 of C instruction flag */
    Or(a=isAInstr, b=instruction[5], out=loadAReg);
    ARegister(in=selARegIn, load=loadAReg, out=aRegOut, out[0..14]=addressM);

    /** tackle DRegister based on ALU out */
    /** load flag is based on isCInstr AND d2 flag */
    And(a=isCInstr, b=instruction[4], out=loadDReg);
    DRegister(in=outALU, load=loadDReg, out=dRegOut);

    /** tackle A or M input for ALU based on a flag in C instruction */
    /** C: 111a c1c2c3c4 c5c6d1d2 d3j1j2j3 */
    /** a: 0 = A register, 1 = M register */
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=selAOrM);
    /** c1 = zx, c2 = nx, c3 = zy, c4 = ny, c5 = f, c6 = no */
    ALU(x=dRegOut, y=selAOrM, zx=instruction[11], nx=instruction[10], 
                              zy=instruction[9], ny=instruction[8], 
                              f=instruction[7], no=instruction[6], 
        out=outM, out=outALU, zr=isZero, ng=isNeg);

    /** tackle writeM based on d3 flag in C instruction */
    And(a=isCInstr, b=instruction[3], out=writeM);

    /** check outcome of ALU for JUMP specs */
    /** some flags for JUMP conditions */
    Not(in=isZero, out=isNotZero);
    Not(in=isNeg, out=isNotNeg);

    /** JGT: NOT(isZero) AND NOT(isNeg) */
    And(a=isNotZero, b=isNotNeg, out=JGT);
    /** JEQ: isZero */
    /** JGE: isNotNeg */
    /** JLT: isNeg */
    /** JNE: NOT(isZero) */
    /** JLE: isZero OR isNeg */
    Or(a=isZero, b=isNeg, out=JLE);

    /** the selection bits in the C instruction */
    And(a=isCInstr, b=instruction[2], out=j1);
    And(a=isCInstr, b=instruction[1], out=j2);
    And(a=isCInstr, b=instruction[0], out=j3);

    /** a: no JUMP */
    /** b: JGT */
    /** c: JEQ */
    /** d: JGE */
    /** e: JLT */
    /** f: JNE */
    /** g: JLE */
    /** h: JMP -> always load address */
    /** sel[0..3] = j1, j2, j3 */
    Mux8Way16(a[0]=false, 
              b[0]=JGT, 
              c[0]=isZero, 
              d[0]=isNotNeg, 
              e[0]=isNeg, 
              f[0]=isNotZero, 
              g[0]=JLE, 
              h[0]=true, 
              sel[0]=j3, sel[1]=j2, sel[2]=j1, 
              out[0]=loadPc);

    /** ALWAYS inc program counter when loadPC is 0 */
    Not(in=loadPc, out=incPc);

    /** tackle program counter */
    PC(in=aRegOut, load=loadPc, inc=incPc, reset=reset, out[0..14]=pc);
}